# Name this workflow descriptively
name: Promote iflow1

on:
  push:
    branches:
      - main
    paths:
      # ‚¨áÔ∏è THIS PATH MUST BE MANUALLY SET FOR EACH IFLOW WORKFLOW ‚¨áÔ∏è  Disable trigger fornow
      - 'disable/iflows/iflow1/**'
  workflow_dispatch:

jobs:
  build:
    name: üì¶ Build Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Determine iFlow Name
        id: iflow_details
        run: |
          IFLOW_ID=$(echo "${{ github.workflow }}" | awk '{print $2}')
          echo "Determined iFlow ID from workflow name: $IFLOW_ID"
          echo "id=$IFLOW_ID" >> "$GITHUB_OUTPUT"

      # ‚¨áÔ∏è 3. ARTIFACT now only contains the specific iFlow + global config ‚¨áÔ∏è
      - name: Archive iFlow and Configs into an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iflow-artifact-${{ github.run_id }}
          path: |
            iflows/${{ steps.iflow_details.outputs.id }}
            config/
          retention-days: 7

  upload_and_prep_config:
    name: üß™ Deploy to D
    needs: build
    outputs:
      iflow_id: ${{ steps.iflow_details.outputs.id }}
      config_matrix: ${{ steps.prep_matrix.outputs.matrix }}
    environment: d
    runs-on: ubuntu-latest
    steps:
      - name: Download the deployable artifact
        uses: actions/download-artifact@v4
        with:
          name: iflow-artifact-${{ github.run_id }}
  
      - name: Determine iFlow Name
        id: iflow_details
        run: |
          IFLOW_ID=$(echo "${{ github.workflow }}" | awk '{print $2}')
          echo "Determined iFlow ID from workflow name: $IFLOW_ID"
          echo "id=$IFLOW_ID" >> "$GITHUB_OUTPUT"
      
      - name: Create Zip Archive for D
        run: |
          cd iflows/${{ steps.iflow_details.outputs.id }}
          zip -r ../../${{ steps.iflow_details.outputs.id }}.zip .

      - name: Deploy to D
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactUpload
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}
            --filePath ${{ steps.iflow_details.outputs.id }}.zip
            --integrationFlowId ${{ steps.iflow_details.outputs.id }}
            --integrationFlowName ${{ steps.iflow_details.outputs.id }}
            --packageId package1
            --verbose true

      - name: Prepare Configuration Matrix
        id: prep_matrix
        run: |
          CONFIG_FILE="iflows/${{ steps.iflow_details.outputs.id }}/src/main/resources/parameters-d.prop"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file not found: $CONFIG_FILE. Skipping parameter updates."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Read the properties file, filter comments/blanks, and convert to a JSON array for the matrix
          JSON_MATRIX=$(grep -v '^#' "$CONFIG_FILE" | grep -v '^$' | jq -R 'split("=") | {key: .[0], value: .[1]}' | jq -s '.')
          echo "Generated Matrix for configuration: $JSON_MATRIX"
          {
            echo 'matrix<<EOF'
            echo "$JSON_MATRIX"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

  update_configuration:
    name: ‚öôÔ∏è Configure iflow in D
    needs: upload_and_prep_config # Depends on the previous job
    environment: d
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # This matrix is dynamically populated by the output of the 'upload_and_prep_config' job - Limit to 256 jobs
        config: ${{ fromJSON(needs.upload_and_prep_config.outputs.config_matrix) }}
    
    # Continue only if the matrix is not empty
    if: ${{ fromJSON(needs.upload_and_prep_config.outputs.config_matrix)[0] }}
    
    steps:
      - name: Update ${{ matrix.config.key }}
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactUpdateConfiguration
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}
            --integrationFlowId ${{ needs.upload_and_prep_config.outputs.iflow_id }}
            --integrationFlowVersion active
            --parameterKey ${{ matrix.config.key }}
            --parameterValue ${{ matrix.config.value }}
            --verbose true
# deploy iflow using project-piper-action with step-name: integrationArtifactDeploy

  deploy:
    name: deploy iflow in D
    needs: [upload_and_prep_config, update_configuration]
    environment: d
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactDeploy
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}
            --integrationFlowId ${{ needs.upload_and_prep_config.outputs.iflow_id }}
            --verbose true

  upload_and_prep_config_y:
    name: üß™ Deploy to Y
    needs: build
    outputs:
      iflow_id: ${{ steps.iflow_details.outputs.id }}
      config_matrix: ${{ steps.prep_matrix.outputs.matrix }}
    environment: y
    runs-on: ubuntu-latest
    steps:
      - name: Download the deployable artifact
        uses: actions/download-artifact@v4
        with:
          name: iflow-artifact-${{ github.run_id }}
  
      - name: Determine iFlow Name
        id: iflow_details
        run: |
          IFLOW_ID=$(echo "${{ github.workflow }}" | awk '{print $2}')
          echo "Determined iFlow ID from workflow name: $IFLOW_ID"
          echo "id=$IFLOW_ID" >> "$GITHUB_OUTPUT"
      
      - name: Create Zip Archive for Y
        run: |
          cd iflows/${{ steps.iflow_details.outputs.id }}
          zip -r ../../${{ steps.iflow_details.outputs.id }}.zip .

      - name: Deploy to Y
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactUpload
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID_Y }}
            --filePath ${{ steps.iflow_details.outputs.id }}.zip
            --integrationFlowId ${{ steps.iflow_details.outputs.id }}
            --integrationFlowName ${{ steps.iflow_details.outputs.id }}
            --packageId package1
            --verbose true

      - name: Prepare Configuration Matrix for Y
        id: prep_matrix
        run: |
          CONFIG_FILE="iflows/${{ steps.iflow_details.outputs.id }}/src/main/resources/parameters-y.prop"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file not found: $CONFIG_FILE. Skipping parameter updates."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Read the properties file, filter comments/blanks, and convert to a JSON array for the matrix
          JSON_MATRIX=$(grep -v '^#' "$CONFIG_FILE" | grep -v '^$' | jq -R 'split("=") | {key: .[0], value: .[1]}' | jq -s '.')
          echo "Generated Matrix for configuration: $JSON_MATRIX"
          {
            echo 'matrix<<EOF'
            echo "$JSON_MATRIX"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

  update_configuration_y:
    name: ‚öôÔ∏è Configure iflow in Y
    needs: upload_and_prep_config_y # Depends on the previous job
    environment: y
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJSON(needs.upload_and_prep_config_y.outputs.config_matrix) }}
    if: ${{ fromJSON(needs.upload_and_prep_config_y.outputs.config_matrix)[0] }}
    steps:
      - name: Update ${{ matrix.config.key }}
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactUpdateConfiguration
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID_Y }}
            --integrationFlowId ${{ needs.upload_and_prep_config_y.outputs.iflow_id }}
            --integrationFlowVersion active
            --parameterKey ${{ matrix.config.key }}
            --parameterValue ${{ matrix.config.value }}
            --verbose true

  deploy_y:
    name: deploy iflow in Y
    needs: [upload_and_prep_config_y, update_configuration_y]
    environment: y
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactDeploy
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID_Y }}
            --integrationFlowId ${{ needs.upload_and_prep_config_y.outputs.iflow_id }}
            --verbose true
            