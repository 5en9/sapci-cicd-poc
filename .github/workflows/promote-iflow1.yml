# Name this workflow descriptively
name: Promote iflow1

on:
  push:
    branches:
      - main
    paths:
      # ⬇️ THIS PATH MUST BE MANUALLY SET FOR EACH IFLOW WORKFLOW ⬇️
      - 'iflows/iflow1/**'
  workflow_dispatch:

jobs:
  build:
    name: 📦 Build Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Determine iFlow Name
        id: iflow_details
        run: |
          IFLOW_ID=$(echo "${{ github.workflow }}" | awk '{print $2}')
          echo "Determined iFlow ID from workflow name: $IFLOW_ID"
          echo "id=$IFLOW_ID" >> "$GITHUB_OUTPUT"

      # ⬇️ 3. ARTIFACT now only contains the specific iFlow + global config ⬇️
      - name: Archive iFlow and Configs into an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iflow-artifact-${{ github.run_id }}
          path: |
            iflows/${{ steps.iflow_details.outputs.id }}
            config/
          retention-days: 7

  deploy-env-d:
    name: 🧪 Deploy to D
    needs: build
    environment: d
    runs-on: ubuntu-latest
    steps:
      - name: Download the deployable artifact
        uses: actions/download-artifact@v4
        with:
          name: iflow-artifact-${{ github.run_id }}

      - name: Download Piper binary
        run: |
          # Get the latest Piper release URL
          PIPER_URL=$(curl -s https://api.github.com/repos/SAP/jenkins-library/releases/latest | jq -r '.assets[] | select(.name | contains("piper")) | .browser_download_url')
          
          # Download Piper
          curl -L $PIPER_URL -o piper

          # Make Piper executable
          chmod +x piper

      - name: Determine iFlow Name
        id: iflow_details
        run: |
          IFLOW_ID=$(echo "${{ github.workflow }}" | awk '{print $2}')
          echo "Determined iFlow ID from workflow name: $IFLOW_ID"
          echo "id=$IFLOW_ID" >> "$GITHUB_OUTPUT"
      
      - name: Create Zip Archive for D
        run: |
          cd iflows/${{ steps.iflow_details.outputs.id }}
          zip -r ../../${{ steps.iflow_details.outputs.id }}.zip .

      - name: Deploy to D
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactUpload
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}
            --filePath ${{ steps.iflow_details.outputs.id }}.zip
            --integrationFlowId ${{ steps.iflow_details.outputs.id }}
            --integrationFlowName ${{ steps.iflow_details.outputs.id }}
            --packageId package1
            --verbose true

      - name: Update Configuration
        run: |
          echo "Reading parameters from parameters-d.prop and updating iFlow..."
          
          export PATH=$PATH:$(pwd)
          # Filter out comments and empty lines
          grep -v '^#' iflows/${{ steps.iflow_details.outputs.id }}/src/main/resources/parameters-d.prop | grep -v '^$' | while IFS= read -r line
          do
            KEY=$(echo "$line" | cut -d'=' -f1)
            VALUE=$(echo "$line" | cut -d'=' -f2-)
            
            echo "Updating -> Key: $KEY, Value: $VALUE"
            
            # Execute the piper command for each key-value pair
            piper integrationArtifactUpdateConfiguration \
              --apiServiceKey "${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}" \
              --integrationFlowId "${{ steps.iflow_details.outputs.id }}" \
              --integrationFlowVersion "active" \
              --parameterKey "$KEY" \
              --parameterValue "$VALUE" \
              --verbose true
          done