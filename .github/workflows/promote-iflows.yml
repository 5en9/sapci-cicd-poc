# This workflow promotes iFlows using a matrix strategy
name: Promote iFlows

on:
  push:
    branches:
      - main
    paths:
      # Trigger on changes in any iFlow directory
      - 'iflows/**'
  workflow_dispatch: # Allows manual runs
    inputs:
      iflow_id:
        description: 'Comma-separated list of iFlow IDs to deploy, or "all" to deploy all iFlows.'
        required: true
        type: string

jobs:
  determine_changes:
    name: ðŸ”Ž Determine Changed iFlows
    runs-on: ubuntu-latest
    outputs:
      iflows: ${{ steps.get_changes.outputs.iflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for git diff
          fetch-depth: 0

      - name: Identify changed iFlows
        id: get_changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then # Manual trigger logic
            IFLOW_ID_INPUT="${{ github.event.inputs.iflow_id }}"
            if [ "$IFLOW_ID_INPUT" == "all" ]; then
              echo "Manual dispatch to deploy all iFlows."
              # List all directories under iflows/, get their base name, and format as JSON
              CHANGED_IFLOWS=$(ls -d iflows/*/ | xargs -n 1 basename | jq -R . | jq -sc .)
            else
              echo "Manual dispatch for specific iFlow(s): $IFLOW_ID_INPUT"
              # Convert comma-separated string to a JSON array, removing whitespace
              CHANGED_IFLOWS=$(echo "$IFLOW_ID_INPUT" | sed 's/ //g' | tr ',' '\n' | jq -R . | jq -sc .)
            fi
          else
            echo "Push event detected, determining changed iFlows."
            # Get changed files between this and the previous commit, extract the iFlow directory, sort unique, and format as JSON
            CHANGED_IFLOWS=$(git diff --name-only HEAD~1 HEAD | grep -oP 'iflows/\K[^/]+' | sort -u | jq -R . | jq -sc .)
          fi
          echo "Detected iFlows for deployment: $CHANGED_IFLOWS"
          echo "iflows=$CHANGED_IFLOWS" >> $GITHUB_OUTPUT

  build:
    name: ðŸ“¦ Build ${{ matrix.iflow_id }}
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.iflows != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Continue with other iFlows even if one fails
      matrix:
        iflow_id: ${{ fromJSON(needs.determine_changes.outputs.iflows) }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Archive iFlow and Configs into an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iflow-artifact-${{ matrix.iflow_id }} # Unique artifact per iFlow
          path: |
            iflows/${{ matrix.iflow_id }}
            config/
          retention-days: 7

  deploy:
    name: ðŸš€ Deploy ${{ matrix.iflow_id }} to ${{ matrix.env.name }}
    needs: [determine_changes, build]
    if: ${{ needs.determine_changes.outputs.iflows != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # This matrix is dynamically populated by the 'determine_changes' job
        iflow_id: ${{ fromJSON(needs.determine_changes.outputs.iflows) }}
        env:
          - { name: 'd' }
          - { name: 'y' }
    
    environment: ${{ matrix.env.name }}

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
            name: iflow-artifact-${{ matrix.iflow_id }}

      - name: Download and Setup Piper
        run: |
          curl -L https://github.com/SAP/jenkins-library/releases/latest/download/piper -o piper
          chmod +x piper
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Create Zip Archive
        run: |
          cd iflows/${{ matrix.iflow_id }}
          zip -r ../../${{ matrix.iflow_id }}.zip .

      - name: Deploy and Activate iFlow
        id: deploy
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactUpload
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}
            --filePath ${{ matrix.iflow_id }}.zip
            --integrationFlowId ${{ matrix.iflow_id }}
            --integrationFlowName ${{ matrix.iflow_id }}
            --verbose true

      - name: Update Configuration
        run: |
          # Define file paths
          PROPDEF_FILE="iflows/${{ matrix.iflow_id }}/src/main/resources/parameters.propdef"
          GLOBAL_CONFIG_FILE="config/parameters-${{ matrix.env.name }}.prop"
          IFLOW_CONFIG_FILE="iflows/${{ matrix.iflow_id }}/src/main/resources/parameters-${{ matrix.env.name }}.prop"

          # Check if the definition file exists. If not, there are no parameters to configure.
          if [ ! -f "$PROPDEF_FILE" ]; then
            echo "Parameter definition file not found: $PROPDEF_FILE. Skipping configuration."
          else
            echo "Reading parameter definitions from $PROPDEF_FILE"
            
            # Use process substitution (< <(...)) for the loop. This is more robust
            # than a standard pipe, as it prevents commands inside the loop from
            # accidentally consuming the input stream.
            while IFS= read -r PARAM_NAME || [[ -n "$PARAM_NAME" ]]; do
                echo "Processing parameter: '$PARAM_NAME'"
                PARAM_VALUE=""

                # 1. Check for iFlow-specific override
                if [ -f "$IFLOW_CONFIG_FILE" ]; then
                  echo "1"
                  VALUE_LINE=$(grep "^${PARAM_NAME}=" "$IFLOW_CONFIG_FILE")
                  if [ -n "$VALUE_LINE" ]; then
                    echo "2"
                    PARAM_VALUE=$(echo "$VALUE_LINE" | cut -d'=' -f2-)
                    echo "  Found iFlow-specific value."
                  fi
                fi
                echo "3"
                # 2. If not found, check for global value
                if [ -z "$PARAM_VALUE" ] && [ -f "$GLOBAL_CONFIG_FILE" ]; then
                  echo "4"
                  VALUE_LINE=$(grep "^${PARAM_NAME}=" "$GLOBAL_CONFIG_FILE")
                  if [ -n "$VALUE_LINE" ]; then
                    echo "5"  
                    PARAM_VALUE=$(echo "$VALUE_LINE" | cut -d'=' -f2-)
                    echo "  Found global value."
                  fi
                fi
                echo "6"
                # 3. If a value was found, update the configuration
                if [ -n "$PARAM_VALUE" ]; then
                  echo "  Attempting to update iFlow with Key: '$PARAM_NAME'"
                  output=$(piper integrationArtifactUpdateConfiguration \
                      --apiServiceKey '${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}' \
                      --integrationFlowId "${{ matrix.iflow_id }}" \
                      --integrationFlowVersion "active" \
                      --parameterKey "$PARAM_NAME" \
                      --parameterValue "$PARAM_VALUE" \
                      --verbose true 2>&1)
                  exit_code=$?

                  echo "$output"

                  if [ $exit_code -ne 0 ]; then
                    if echo "$output" | grep -q -E "does not exist|not found for Integration Flow"; then
                      echo "Warning: Parameter '$PARAM_NAME' not found on iFlow. This is expected for package-level parameters. Skipping."
                    else
                      echo "Error: A critical error occurred during parameter update. Failing the step."
                      exit 1
                    fi
                  fi
                else
                  echo "  No value found for '$PARAM_NAME' in property files. Skipping."
                fi
            done < <(grep -oP '<name>\K[^<]+' "$PROPDEF_FILE")
          fi
          
          echo "Configuration updated. Now deploying the iFlow..."
          piper integrationArtifactDeploy \
            --apiServiceKey '${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}' \
            --integrationFlowId "${{ matrix.iflow_id }}" \
            --verbose true
