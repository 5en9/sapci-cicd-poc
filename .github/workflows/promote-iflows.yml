# This workflow promotes iFlows using a matrix strategy
name: Promote iFlows

on:
  push:
    branches:
      - main
    paths:
      # Trigger on changes in any iFlow directory
      - 'iflows/**'
  workflow_dispatch: # Allows manual runs
    inputs:
      iflow_id:
        description: 'Comma-separated list of iFlow IDs to deploy, or "all" to deploy all iFlows.'
        required: true
        type: string

jobs:
  determine_changes:
    name: ðŸ”Ž Determine Changed iFlows
    runs-on: ubuntu-latest
    outputs:
      iflows: ${{ steps.get_changes.outputs.iflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for git diff
          fetch-depth: 0

      - name: Identify changed iFlows
        id: get_changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then # Manual trigger logic
            IFLOW_ID_INPUT="${{ github.event.inputs.iflow_id }}"
            if [ "$IFLOW_ID_INPUT" == "all" ]; then
              echo "Manual dispatch to deploy all iFlows."
              # List all directories under iflows/, get their base name, and format as JSON
              CHANGED_IFLOWS=$(ls -d iflows/*/ | xargs -n 1 basename | jq -R . | jq -sc .)
            else
              echo "Manual dispatch for specific iFlow(s): $IFLOW_ID_INPUT"
              # Convert comma-separated string to a JSON array, removing whitespace
              CHANGED_IFLOWS=$(echo "$IFLOW_ID_INPUT" | sed 's/ //g' | tr ',' '\n' | jq -R . | jq -sc .)
            fi
          else
            echo "Push event detected, determining changed iFlows."
            # Get changed files between this and the previous commit, extract the iFlow directory, sort unique, and format as JSON
            CHANGED_IFLOWS=$(git diff --name-only HEAD~1 HEAD | grep -oP 'iflows/\K[^/]+' | sort -u | jq -R . | jq -sc .)
          fi
          echo "Detected iFlows for deployment: $CHANGED_IFLOWS"
          echo "iflows=$CHANGED_IFLOWS" >> $GITHUB_OUTPUT

  build:
    name: ðŸ“¦ Build ${{ matrix.iflow_id }}
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.iflows != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Continue with other iFlows even if one fails
      matrix:
        iflow_id: ${{ fromJSON(needs.determine_changes.outputs.iflows) }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Archive iFlow and Configs into an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iflow-artifact-${{ matrix.iflow_id }} # Unique artifact per iFlow
          path: |
            iflows/${{ matrix.iflow_id }}
            config/
          retention-days: 7

  deploy:
    name: ðŸš€ Deploy ${{ matrix.iflow_id }} to ${{ matrix.env.name }}
    needs: [determine_changes, build]
    if: ${{ needs.determine_changes.outputs.iflows != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # This matrix is dynamically populated by the 'determine_changes' job
        iflow_id: ${{ fromJSON(needs.determine_changes.outputs.iflows) }}
        env:
          - { name: 'd' }
          - { name: 'y' }
    
    environment: ${{ matrix.env.name }}

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
            name: iflow-artifact-${{ matrix.iflow_id }}

      - name: Download and Setup Piper
        run: |
          curl -L https://github.com/SAP/jenkins-library/releases/latest/download/piper -o piper
          chmod +x piper
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Create Zip Archive
        run: |
          cd iflows/${{ matrix.iflow_id }}
          zip -r ../../${{ matrix.iflow_id }}.zip .

      - name: Deploy and Activate iFlow
        id: deploy
        uses: SAP/project-piper-action@main
        with:
          step-name: integrationArtifactUpload
          flags:
            --apiServiceKey ${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}
            --filePath ${{ matrix.iflow_id }}.zip
            --integrationFlowId ${{ matrix.iflow_id }}
            --integrationFlowName ${{ matrix.iflow_id }}
            --verbose true

      - name: Update Configuration
        run: |
          GLOBAL_CONFIG_FILE="config/parameters-${{ matrix.env.name }}.prop"
          IFLOW_CONFIG_FILE="iflows/${{ matrix.iflow_id }}/src/main/resources/parameters-${{ matrix.env.name }}.prop"

          # Function to apply parameters from a file
          apply_config() {
            local file_path=$1
            local config_type=$2
            grep -v '^#' "$file_path" | grep -v '^$' | while IFS= read -r line || [[ -n "$line" ]];
            do
              KEY=$(echo "$line" | cut -d'=' -f1)
              VALUE=$(echo "$line" | cut -d'=' -f2-)
              echo "Updating ${config_type} -> Key: $KEY"

              # Execute piper and capture all output (stdout and stderr) and the exit code.
              output=$(piper integrationArtifactUpdateConfiguration \
                  --apiServiceKey '${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}' \
                  --integrationFlowId "${{ matrix.iflow_id }}" \
                  --integrationFlowVersion "active" \
                  --parameterKey "$KEY" \
                  --parameterValue "$VALUE" \
                  --verbose true 2>&1)
              exit_code=$?

              echo "$output"

              # If the command failed, check if it's the expected "parameter not found" error.
              # If so, we issue a warning but continue. Otherwise, we fail the build.
              if [ $exit_code -ne 0 ]; then
                if echo "$output" | grep -q -E "does not exist|not found for Integration Flow"; then
                  echo "Warning: Parameter '$KEY' not found on iFlow. Skipping update for this parameter."
                else
                  echo "Error: A critical error occurred during parameter update. Failing the step."
                  exit 1
                fi
              fi
            done
          }

          # Apply global configuration if it exists
          if [ -f "$GLOBAL_CONFIG_FILE" ]; then
            echo "Applying global configuration from $GLOBAL_CONFIG_FILE..."
            apply_config "$GLOBAL_CONFIG_FILE" "Global"
          else
            echo "Global configuration file not found, skipping."
          fi

          # Apply iFlow-specific configuration if it exists (will override global)
          if [ -f "$IFLOW_CONFIG_FILE" ]; then
            echo "Applying iFlow-specific configuration from $IFLOW_CONFIG_FILE..."
            apply_config "$IFLOW_CONFIG_FILE" "iFlow"
          else
            echo "iFlow-specific configuration file not found, skipping."
          fi

          echo "Configuration updated. Now deploying the iFlow..."
          piper integrationArtifactDeploy \
            --apiServiceKey '${{ secrets.CPI_APISERVICEKEY_CREDENTIALS_ID }}' \
            --integrationFlowId "${{ matrix.iflow_id }}" \
            --verbose true
