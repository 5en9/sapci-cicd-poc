# This workflow promotes iFlows using a matrix strategy
name: Promote iFlows

on:
  push:
    branches:
      - main
    paths:
      # Trigger on changes in any iFlow directory
      - 'iflows/**'
  workflow_dispatch: # Allows manual runs
    inputs:
      iflow_id:
        description: 'Comma-separated list of iFlow IDs to deploy, or "all" to deploy all iFlows.'
        required: true
        type: string
      tenants:
        description: 'Comma-separated list of tenants to deploy to (e.g., A,B,C). If not provided, will use config/deployment.yml.'
        required: false
        type: string

jobs:
  determine_changes:
    name: ðŸ”Ž Determine Changed iFlows and Tenants
    runs-on: ubuntu-latest
    outputs:
      iflows: ${{ steps.get_changes.outputs.iflows }}
      tenants: ${{ steps.get_config.outputs.tenants }}
      environments: ${{ steps.get_config.outputs.environments }}
      test_environments: ${{ steps.get_config.outputs.test_environments }}
      package_id: ${{ steps.get_config.outputs.package_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for git diff
          fetch-depth: 0

      - name: Set up yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Identify changed iFlows
        id: get_changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then # Manual trigger logic
            IFLOW_ID_INPUT="${{ github.event.inputs.iflow_id }}"
            if [ "$IFLOW_ID_INPUT" == "all" ]; then
              echo "Manual dispatch to deploy all iFlows."
              # List all directories under iflows/, get their base name, and format as JSON
              CHANGED_IFLOWS=$(ls -d iflows/*/ | xargs -n 1 basename | jq -R . | jq -sc .)
            else
              echo "Manual dispatch for specific iFlow(s): $IFLOW_ID_INPUT"
              # Convert comma-separated string to a JSON array, removing whitespace
              CHANGED_IFLOWS=$(echo "$IFLOW_ID_INPUT" | sed 's/ //g' | tr ',' '\n' | jq -R . | jq -sc .)
            fi
          else
            echo "Push event detected, determining changed iFlows."
            # Get changed files between this and the previous commit, extract the iFlow directory, sort unique, and format as JSON
            CHANGED_IFLOWS=$(git diff --name-only HEAD~1 HEAD | grep -oP 'iflows/\K[^/]+' | sort -u | jq -R . | jq -sc .)
          fi
          echo "Detected iFlows for deployment: $CHANGED_IFLOWS"
          echo "iflows=$CHANGED_IFLOWS" >> $GITHUB_OUTPUT

      - name: Determine tenants and environments for deployment
        id: get_config
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tenants }}" ]; then
            TENANTS_INPUT="${{ github.event.inputs.tenants }}"
            echo "Using tenants from workflow dispatch: $TENANTS_INPUT"
            TENANTS_JSON=$(echo "$TENANTS_INPUT" | sed 's/ //g' | tr ',' '\n' | jq -R . | jq -sc . | tr '[:lower:]' '[:upper:]')
          elif [ -f "config/deployment.yml" ]; then
            echo "Using tenants from config/deployment.yml"
            TENANTS_JSON=$(yq -o=json '.tenants' config/deployment.yml | jq -c '.' | tr '[:lower:]' '[:upper:]')
          else
            echo "No tenant configuration found, using default tenant: A"
            TENANTS_JSON='["A"]'
          fi
          echo "Tenants for deployment (JSON): $TENANTS_JSON"
          echo "tenants=$TENANTS_JSON" >> $GITHUB_OUTPUT

          if [ -f "config/deployment.yml" ]; then
            echo "Using environments from config/deployment.yml"
            ENV_JSON=$(yq -o=json '.environments' config/deployment.yml | jq -c '.' | tr '[:lower:]' '[:upper:]')
            TEST_ENV_JSON=$(yq -o=json '.test_environments' config/deployment.yml | jq -c '.' | tr '[:lower:]' '[:upper:]')
          else
            echo "No environment configuration found, using default environments: D, Y"
            ENV_JSON='["D", "Y"]'
            TEST_ENV_JSON='["Y"]'
          fi
          echo "Environments for deployment (JSON): $ENV_JSON"
          echo "environments=$ENV_JSON" >> $GITHUB_OUTPUT
          echo "Test environments (JSON): $TEST_ENV_JSON"
          echo "test_environments=$TEST_ENV_JSON" >> $GITHUB_OUTPUT

          if [ -f "config/deployment.yml" ]; then
            echo "Using package_id from config/deployment.yml"
            PACKAGE_ID=$(yq -r '.package_id' config/deployment.yml)
          else
            echo "No package_id configuration found, using default packageId: CI_PACKAGE_ID"
            PACKAGE_ID="CI_PACKAGE_ID"
          fi
          echo "package_id=$PACKAGE_ID" >> $GITHUB_OUTPUT

  build:
    name: ðŸ“¦ Build ${{ matrix.iflow_id }}
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.iflows != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Continue with other iFlows even if one fails
      matrix:
        iflow_id: ${{ fromJSON(needs.determine_changes.outputs.iflows) }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Archive iFlow and Configs into an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iflow-artifact-${{ matrix.iflow_id }} # Unique artifact per iFlow
          path: |
            iflows/${{ matrix.iflow_id }}
            config/
          retention-days: 90

  prepare_package:
    name: ðŸ“¦ Prepare Integration Package for Tenant ${{ matrix.tenant }} and Env ${{ matrix.environment }}
    needs: [determine_changes, build]
    if: ${{ needs.determine_changes.outputs.iflows != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tenant: ${{ fromJSON(needs.determine_changes.outputs.tenants) }}
        environment: ${{ fromJSON(needs.determine_changes.outputs.environments) }}
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Set API Key and OAuth Details for Package Creation
        id: set_api_key_and_oauth_package
        run: |
          SECRET_NAME="CI_APISERVICEKEY_${{ matrix.tenant }}"
          echo "Debugging: SECRET_NAME is $SECRET_NAME"
          API_KEY_JSON=$(echo "'${{ toJSON(secrets) }}'" | jq -r ."$SECRET_NAME")
          echo "Debugging: API_KEY_JSON is ::add-mask::$API_KEY_JSON"
          if [ -z "$API_KEY_JSON" ] || [ "$API_KEY_JSON" == "null" ]; then
            echo "Error: Secret $SECRET_NAME not found for tenant $DEFAULT_TENANT."
            exit 1
          fi
          
          CLIENT_ID=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientid")
          CLIENT_SECRET=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientsecret")
          TOKEN_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.tokenurl")
          BASE_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.url")

          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "TOKEN_URL=$TOKEN_URL" >> $GITHUB_ENV
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "API_KEY=$API_KEY_JSON" >> $GITHUB_ENV # This line sets the API_KEY environment variable

      - name: Check and Create Integration Package
        run: |
          PACKAGE_ID="${{ needs.determine_changes.outputs.package_id }}"
          
          echo "Getting OAuth token..."
          TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d 'client_id=${{ env.CLIENT_ID }}' \
            -d 'client_secret=${{ env.CLIENT_SECRET }}' \
            "${{ env.TOKEN_URL }}")
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r ".access_token")
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
            echo "Error: Failed to obtain access token."
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi
          echo "::add-mask::$ACCESS_TOKEN" # Mask the access token
          echo "Access token obtained."

          echo "Checking if Integration Package '$PACKAGE_ID' exists..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{\http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "${{ env.BASE_URL }}/api/v1/IntegrationPackages(Id='$PACKAGE_ID')")

          echo "HTTP Status Code: $HTTP_CODE"

          if [ "$HTTP_CODE" == "404" ]; then
            echo "Integration Package '$PACKAGE_ID' not found. Creating it..."
            CREATE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -H "Accept: application/json" \
              -d "{\"Id\": \"$PACKAGE_ID\", \"Name\": \"$PACKAGE_ID\", \"ShortText\": \"Automatically created by CI/CD pipeline\"}" \
              "${{ env.BASE_URL }}/api/v1/IntegrationPackages")
            
            echo "Create Package Response: $CREATE_RESPONSE"
            
            if echo "$CREATE_RESPONSE" | jq -e ".d.Id" > /dev/null; then
              echo "Integration Package '$PACKAGE_ID' created successfully."
            else
              echo "Error: Failed to create Integration Package '$PACKAGE_ID'."
              exit 1
            fi
          elif [ "$HTTP_CODE" == "200" ]; then
            echo "Integration Package '$PACKAGE_ID' already exists. Skipping creation."
          else
            echo "Error: Unexpected HTTP status code '$HTTP_CODE' when checking Integration Package existence."
            exit 1
          fi

  dispatch_deployment:
    name: ðŸš€ Dispatch Deployment for ${{ matrix.iflow_id }}
    needs: [determine_changes, build, prepare_package]
    if: ${{ needs.determine_changes.outputs.iflows != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        iflow_id: ${{ fromJSON(needs.determine_changes.outputs.iflows) }}
    uses: ./.github/workflows/reusable-deploy.yml
    with:
      iflow_id: ${{ matrix.iflow_id }}
      package_id: ${{ needs.determine_changes.outputs.package_id }}
      tenants: ${{ needs.determine_changes.outputs.tenants }}
      environments: ${{ needs.determine_changes.outputs.environments }}
      test_environments: ${{ needs.determine_changes.outputs.test_environments }}
    secrets: inherit