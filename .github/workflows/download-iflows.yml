name: Download iFlows

on:
  workflow_dispatch: # Allows manual runs
    inputs:
      iflow_id:
        description: 'Comma-separated list of iFlow IDs to deploy, or "all" to download all iFlows.'
        required: true
        type: string
      tenant:
        description: Tenant to download. If not provided, will use config/deployment.yml.'
        required: false
        type: string
      branch_name:
        description: 'Optional: The name of the branch to create.'
        required: false
        type: string

jobs:
  determine_iflows:
    name: Determine iFlows to download
    runs-on: ubuntu-latest
    outputs:
      iflows: ${{ steps.get_iflows.outputs.iflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
  
      - name: Set API Key and OAuth Details
        id: set_api_key_and_oauth
        run: |
          if [ -z "${{ inputs.tenant }}" ]; then
            TENANT=$(yq -r '.tenants[0]' config/deployment.yml)
            echo "Tenant input not provided. Using first tenant from deployment.yml: $TENANT"
          else
            TENANT="${{ inputs.tenant }}"
            echo "Using provided tenant: $TENANT"
          fi
          
          SECRET_NAME="CI_APISERVICEKEY_D_$TENANT"
          echo "Debugging: SECRET_NAME is $SECRET_NAME"
          API_KEY_JSON=$(echo '${{ toJSON(secrets) }}' | jq -r ."$SECRET_NAME")
          echo "Debugging: API_KEY_JSON is ::add-mask::$API_KEY_JSON"
          if [ -z "$API_KEY_JSON" ] || [ "$API_KEY_JSON" == "null" ]; then
            echo "Error: Secret $SECRET_NAME not found for tenant $TENANT."
            exit 1
          fi        
          CLIENT_ID=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientid")
          CLIENT_SECRET=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientsecret")
          TOKEN_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.tokenurl")
          BASE_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.url")

          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "TOKEN_URL=$TOKEN_URL" >> $GITHUB_ENV
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "API_KEY=$API_KEY_JSON" >> $GITHUB_ENV # This line sets the API_KEY environment variable

      - name: Get iFlows list
        id: get_iflows
        run: |
          PACKAGE_ID=$(yq -r '.package_id' config/deployment.yml)
          if [ "${{ inputs.iflow_id}}" == "all" ]; then
            echo "Getting all iFlows for package $PACKAGE_ID"

            echo "Getting OAuth token..."
            TOKEN_RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "grant_type=client_credentials" \
              -d 'client_id=${{ env.CLIENT_ID }}' \
              -d 'client_secret=${{ env.CLIENT_SECRET }}' \
              "${{ env.TOKEN_URL }}")

            ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r ".access_token")
            if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
              echo "Error: Failed to obtain access token."
              echo "Response: $TOKEN_RESPONSE"
              exit 1
            fi
            echo "Access token obtained."

            API_URL="${{ env.BASE_URL }}/api/v1/IntegrationPackages('$PACKAGE_ID')/IntegrationDesigntimeArtifacts"
            echo "Fetching iFlows from $API_URL"

            HTTP_CODE=$(curl -s -w "%{http_code}" -o response.json \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Accept: application/json" \
              "$API_URL")

            if [ "$HTTP_CODE" != "200" ]; then
                echo "Error: Failed to fetch iFlows. HTTP status code: $HTTP_CODE"
                cat response.json
                exit 1
            fi

            IFLOW_IDS=$(jq -c '[.d.results[].Id]' response.json)
            echo "Found iFlows: $IFLOW_IDS"
            echo "iflows=$IFLOW_IDS" >> $GITHUB_OUTPUT
          else
            IFLOW_IDS=$(echo "[${{ inputs.iflow_id }}]")
            echo "Using provided iFlows: $IFLOW_IDS"
            echo "iflows=$IFLOW_IDS" >> $GITHUB_OUTPUT
          fi

  download_artifacts:
    name: Download iFlows
    runs-on: ubuntu-latest
    needs: determine_iflows
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Download and Setup Piper
        run: |
          curl -L https://github.com/SAP/jenkins-library/releases/latest/download/piper -o piper
          chmod +x piper
          sudo mv piper /usr/local/bin/

      - name: Download iFlow artifacts
        run: |
          if [ ! -d "iflows" ]; then
            mkdir iflows
          fi
          
          if [ -z "${{ inputs.tenant }}" ]; then
            TENANT=$(yq -r '.tenants[0]' config/deployment.yml)
            echo "Tenant input not provided. Using first tenant from deployment.yml: $TENANT"
          else
            TENANT="${{ inputs.tenant }}"
            echo "Using provided tenant: $TENANT"
          fi

          SECRET_NAME="CI_APISERVICEKEY_D_$TENANT"
          API_KEY_JSON=$(echo '${{ toJSON(secrets) }}' | jq -r ."$SECRET_NAME")

          if [ -z "$API_KEY_JSON" ] || [ "$API_KEY_JSON" == "null" ]; then
            echo "Error: Secret $SECRET_NAME not found for tenant $TENANT."
            exit 1
          fi

          for iflow_id in $(echo '${{ needs.determine_iflows.outputs.iflows }}' | jq -r '.[]'); do
            echo "Downloading artifact for iFlow: $iflow_id"
            
            piper integrationArtifactDownload \
              --apiServiceKey "$API_KEY_JSON" \
              --integrationFlowId "$iflow_id" \
              --integrationFlowVersion "active" \
              --downloadPath "iflows/$iflow_id"
            
            TARGET_DIR="iflows/$iflow_id"
            ZIP_FILE="$TARGET_DIR/$iflow_id.zip"
            
            echo "Unzipping $ZIP_FILE to $TARGET_DIR"
            unzip -o "$ZIP_FILE" -d "$TARGET_DIR"
            rm "$ZIP_FILE"
          done
      - name: Create Branch
        id: create_branch
        run: |
          BRANCH_NAME=${{ inputs.branch_name }}
          if [ -z "$BRANCH_NAME" ]; then
            BRANCH_NAME="sync/iflow-${{ inputs.iflow_id }}"
          fi
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout -b "$BRANCH_NAME"
          
          git add .
          git commit -m "feat: Sync iFlow ${{ inputs.iflow_id }}"
          git push origin "$BRANCH_NAME" --force