name: Download iFlows

on:
  workflow_call:
    inputs:
      iflows:
        required: true
        type: string
      package_id:
        required: true
        type: string
      tenants:
        required: true
        type: string
      environment:
        required: true
        type: string

jobs:
  prep_environment:
    name: Approve download for ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - run: echo "This job is a placeholder for environment approval."

  get_secrets:
    name: Get secrets
    runs-on: ubuntu-latest
    needs: prep_environment
    outputs:
      secrets: ${{ steps.get_secrets.outputs.secrets }}
    steps:
      - name: Get Secrets
        id: get_secrets
        run: |
          echo "secrets=$(echo '${{ toJSON(secrets) }}' | jq -c 'del(.github_token)')" >> $GITHUB_OUTPUT

  determine_iflows:
    name: Determine iFlows to download
    runs-on: ubuntu-latest
    needs: get_secrets
    outputs:
      iflows: ${{ steps.get_iflows.outputs.iflows }}
    steps:
      - name: Set API Key and OAuth Details
        id: set_api_key_and_oauth
        run: |
          # Use the first tenant to get credentials for the API call
          FIRST_TENANT=$(echo '${{ inputs.tenants }}' | jq -r 'sort | .[0]')
          SECRET_NAME="CI_APISERVICEKEY_$FIRST_TENANT"
          API_KEY_JSON=$(echo '${{ needs.get_secrets.outputs.secrets }}' | jq -r ."$SECRET_NAME")

          if [ -z "$API_KEY_JSON" ] || [ "$API_KEY_JSON" == "null" ]; then
            echo "Error: Secret $SECRET_NAME not found for tenant $FIRST_TENANT."
            exit 1
          fi

          CLIENT_ID=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientid")
          CLIENT_SECRET=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientsecret")
          TOKEN_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.tokenurl")
          BASE_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.url")

          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "TOKEN_URL=$TOKEN_URL" >> $GITHUB_ENV
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV

      - name: Get iFlows list
        id: get_iflows
        run: |
          if [ "${{ inputs.iflows }}" == "all" ]; then
            echo "Getting all iFlows for package ${{ inputs.package_id }}"

            echo "Getting OAuth token..."
            TOKEN_RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "grant_type=client_credentials" \
              -d "client_id=${{ env.CLIENT_ID }}" \
              -d "client_secret=${{ env.CLIENT_SECRET }}" \
              "${{ env.TOKEN_URL }}")

            ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r ".access_token")
            if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
              echo "Error: Failed to obtain access token."
              echo "Response: $TOKEN_RESPONSE"
              exit 1
            fi
            echo "Access token obtained."

            API_URL="${{ env.BASE_URL }}/api/v1/IntegrationPackages('${{ inputs.package_id }}')/IntegrationDesigntimeArtifacts?%24format=json"
            echo "Fetching iFlows from $API_URL"

            HTTP_CODE=$(curl -s -w "%{\http_code}" -o response.json \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Accept: application/json" \
              "$API_URL")

            if [ "$HTTP_CODE" != "200" ]; then
                echo "Error: Failed to fetch iFlows. HTTP status code: $HTTP_CODE"
                cat response.json
                exit 1
            fi

            IFLOW_IDS=$(jq -c '[.d.results[].Id]' response.json)
            echo "Found iFlows: $IFLOW_IDS"
            echo "iflows=$IFLOW_IDS" >> $GITHUB_OUTPUT
          else
            echo "Using provided iFlows: ${{ inputs.iflows }}"
            echo "iflows=${{ inputs.iflows }}" >> $GITHUB_OUTPUT
          fi

  download_artifacts:
    name: Download ${{ matrix.iflow_id }}
    runs-on: ubuntu-latest
    needs: determine_iflows
    strategy:
      fail-fast: false
      matrix:
        iflow_id: ${{ fromJSON(needs.determine_iflows.outputs.iflows) }}
    steps:
      - name: Download iFlow artifact
        run: |
          echo "Downloading artifact for iFlow: ${{ matrix.iflow_id }}"
          # Placeholder for download logic.
          # You would typically use a tool like `curl` or a dedicated action
          # to download the iFlow artifact using the API and credentials.