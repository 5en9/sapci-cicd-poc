name: Download iFlows

on:
  workflow_call:
    inputs:
      iflow_id:
        description: 'Comma-separated list of iFlow IDs to deploy, or "all" to download all iFlows.'
        required: true
        type: string
      tenant:
        description: Tenant to download. If not provided, will use config/deployment.yml.'
        required: false
        type: string

jobs:
  determine_iflows:
    name: Determine iFlows to download
    runs-on: ubuntu-latest
    outputs:
      iflows: ${{ steps.get_iflows.outputs.iflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
  
      - name: Set API Key and OAuth Details
        id: set_api_key_and_oauth
        run: |
          if [ -z "${{ inputs.tenant }}" ]; then
            TENANT=$(yq -r '.tenants[0]' config/deployment.yml)
            echo "Tenant input not provided. Using first tenant from deployment.yml: $TENANT"
          else
            TENANT="${{ inputs.tenant }}"
            echo "Using provided tenant: $TENANT"
          fi
          
          SECRET_NAME="CI_APISERVICEKEY_D_$TENANT"
          echo "Debugging: SECRET_NAME is $SECRET_NAME"
          API_KEY_JSON=$(echo '${{ toJSON(secrets) }}' | jq -r ."$SECRET_NAME")
          echo "Debugging: API_KEY_JSON is ::add-mask::$API_KEY_JSON"
          if [ -z "$API_KEY_JSON" ] || [ "$API_KEY_JSON" == "null" ]; then
            echo "Error: Secret $SECRET_NAME not found for tenant $TENANT."
            exit 1
          fi        
          CLIENT_ID=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientid")
          CLIENT_SECRET=$(echo "$API_KEY_JSON" | jq -r ".oauth.clientsecret")
          TOKEN_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.tokenurl")
          BASE_URL=$(echo "$API_KEY_JSON" | jq -r ".oauth.url")

          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "TOKEN_URL=$TOKEN_URL" >> $GITHUB_ENV
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "API_KEY=$API_KEY_JSON" >> $GITHUB_ENV # This line sets the API_KEY environment variable

      - name: Get iFlows list
        id: get_iflows
        run: |
          PACKAGE_ID=$(yq -r '.package_id' config/deployment.yml)
          if [ "${{ inputs.iflows }}" == "all" ]; then
            echo "Getting all iFlows for package $PACKAGE_ID"

            echo "Getting OAuth token..."
            TOKEN_RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "grant_type=client_credentials" \
              -d "client_id=${{ env.CLIENT_ID }}" \
              -d "client_secret=${{ env.CLIENT_SECRET }}" \
              "${{ env.TOKEN_URL }}")

            ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r ".access_token")
            if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
              echo "Error: Failed to obtain access token."
              echo "Response: $TOKEN_RESPONSE"
              exit 1
            fi
            echo "Access token obtained."

            API_URL="${{ env.BASE_URL }}/api/v1/IntegrationPackages('$PACKAGE_ID')/IntegrationDesigntimeArtifacts"
            echo "Fetching iFlows from $API_URL"

            HTTP_CODE=$(curl -s -w "%{\http_code}" -o response.json \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Accept: application/json" \
              "$API_URL")

            if [ "$HTTP_CODE" != "200" ]; then
                echo "Error: Failed to fetch iFlows. HTTP status code: $HTTP_CODE"
                cat response.json
                exit 1
            fi

            IFLOW_IDS=$(jq -c '[.d.results[].Id]' response.json)
            echo "Found iFlows: $IFLOW_IDS"
            echo "iflows=$IFLOW_IDS" >> $GITHUB_OUTPUT
          else
            echo "Using provided iFlows: ${{ inputs.iflows }}"
            echo "iflows=${{ inputs.iflows }}" >> $GITHUB_OUTPUT
          fi

  download_artifacts:
    name: Download ${{ matrix.iflow_id }}
    runs-on: ubuntu-latest
    needs: determine_iflows
    strategy:
      fail-fast: false
      matrix:
        iflow_id: ${{ fromJSON(needs.determine_iflows.outputs.iflows) }}
    steps:
      - name: Download iFlow artifact
        run: |
          echo "Downloading artifact for iFlow: ${{ matrix.iflow_id }}"
          # Placeholder for download logic.
          # You would typically use a tool like `curl` or a dedicated action
          # to download the iFlow artifact using the API and credentials.
